Missing Return Value / Non-Compliant ERC20 Transfer

Summary:
The contract uses `transfer()` or `transferFrom()` on non-compliant tokens such as cUSDC or cDAI, which do not correctly return a boolean value. This can lead to situations where failed transfers are treated as successful.

Impact:
- Funds may fail to transfer without reverting
- Logic that assumes a successful transfer may proceed incorrectly.


If `token` is a non-compliant ERC20 like `cUSDC or cDAI`, the transfer may always pass even if the transfer fails, because the return value is undefined.

Recommendation:
Use safe wrappers from libraries like OpenZeppelinâ€™s `SafeERC20`, which handles return values safely.

Affected Code:

https://github.com/YahayaSalisu162/compound-protocol/blob/master/contracts%2FCToken.sol#L120



proof of concept (PoC)



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/interfaces/IcERC20.sol";

contract MissingReturnValue is Test {
 address constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;
 address constant User = 0x90581aFC83520a649376852166B3df92153cEE20;

IcERC20 cusdc = IcERC20(cUSDC);

function setUp() public {
    vm.createSelectFork(vm.envString("RPC_URL"), 19600000);
    vm.deal(address(this), 1000e6);
}

function test_MissingReturnValue() public {

    uint256 balance = cusdc.balanceOf(address(this));
    uint256 OverAmount = balance + 1;

    cusdc.transfer(User, OverAmount);
    
    uint256 userBalance = cusdc.balanceOf(User);
emit log_named_uint("User Balance After Transfer", userBalance);
assertEq(userBalance, 0, "Transfer failed silently but acting as it succe, missing return value!");
}
}


![PoC Output]
(https://github.com/user-attachments/assets/a9045b85-3f8b-40c9-9da6-cae2fe16d6c0)